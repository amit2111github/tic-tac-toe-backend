/* eslint-disabled */

const app = require('../app')
const debug = require('debug')('backens:server')
const http = require('http')
const { Server } = require('socket.io')

const port = normalizePort(process.env.PORT || '5000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)
const io = new Server(server, {
  cors: {
    origin: '*'
  }
})
const members = []
io.on('connection', (socket) => {
  const roomId = socket.handshake.query.id
  console.log(roomId, 'ROOMID')
  socket.join(roomId)
  socket.broadcast.emit('joined', 'Player2 has joined the game')
  socket.on('move', ({ row, col }) => {
    socket.broadcast.emit('move', { row, col })
  })
  socket.on('game-ended', ({ type, gameStatus }) => {
    socket.broadcast.emit('game-ended', { type, gameStatus })
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('Listening on port 5000')
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
